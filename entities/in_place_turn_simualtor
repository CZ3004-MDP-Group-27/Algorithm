from trip_planner import *
from constants import width, height, WIDTH, HEIGHT

class turning_box():
    pos = [0,0]
    x_boundary = [0,0]
    y_boundary = [0,0]
    def __init__(self, pos_of_car, orientation,  direction_of_turn):
        super().__init__()
        if orientation == 'N' or orientation == '90':
            if direction_of_turn == 'left':
                self.pos[0] = pos_of_car[0] + width - (WIDTH/2)
                self.pos[1] = pos_of_car[1] - height + (HEIGHT/2)
            elif direction_of_turn == 'right':
                self.pos[0] = pos_of_car[0] - width + (WIDTH/2)
                self.pos[1] = pos_of_car[1] - height + (HEIGHT/2)
            self.x_boundary[0] = self.pos[0] - (WIDTH/2)
            self.x_boundary[1] = self.pos[0] + (WIDTH/2)
            self.y_boundary[0] = self.pos[1] - (HEIGHT/2)
            self.y_boundary[1] = self.pos[1] + (HEIGHT/2)
        elif orientation == 'S' or orientation == '270':
            if direction_of_turn == 'left':
                self.pos[0] = pos_of_car[0] - width + (WIDTH/2)
                self.pos[1] = pos_of_car[1] + height - (HEIGHT/2)
            elif direction_of_turn == 'right':
                self.pos[0] = pos_of_car[0] + width - (WIDTH/2)
                self.pos[1] = pos_of_car[1] + height - (HEIGHT/2)
            self.x_boundary[0] = self.pos[0] - (WIDTH/2)
            self.x_boundary[1] = self.pos[0] + (WIDTH/2)
            self.y_boundary[0] = self.pos[1] - (HEIGHT/2)
            self.y_boundary[1] = self.pos[1] + (HEIGHT/2)
        elif orientation == 'E' or orientation == '0':
            if direction_of_turn == 'left':
                self.pos[0] = pos_of_car[0] - height + (HEIGHT/2)
                self.pos[1] = pos_of_car[1] - width + (WIDTH/2)
            elif direction_of_turn == 'right':
                self.pos[0] = pos_of_car[0] - height + (HEIGHT/2)
                self.pos[1] = pos_of_car[1] + width - (WIDTH/2)
            self.x_boundary[0] = self.pos[0] - (HEIGHT/2)
            self.x_boundary[1] = self.pos[0] + (HEIGHT/2)
            self.y_boundary[0] = self.pos[1] - (WIDTH/2)
            self.y_boundary[1] = self.pos[1] + (WIDTH/2)
        elif orientation == 'W' or orientation == '180':
            if direction_of_turn == 'left':
                self.pos[0] = pos_of_car[0] + height - (HEIGHT/2)
                self.pos[1] = pos_of_car[1] + width - (WIDTH/2)
            elif direction_of_turn == 'right':
                self.pos[0] = pos_of_car[0] + height - (HEIGHT/2)
                self.pos[1] = pos_of_car[1] - width + (WIDTH/2)
            self.x_boundary[0] = self.pos[0] - (HEIGHT/2)
            self.x_boundary[1] = self.pos[0] + (HEIGHT/2)
            self.y_boundary[0] = self.pos[1] - (WIDTH/2)
            self.y_boundary[1] = self.pos[1] + (WIDTH/2)

        self.pos = [self.pos[0], self.pos[1]]

    
    def check_inplace_turn_validity(self, obstacle_list):
        validity = True

        for boundary in box.x_boundary:
            if boundary < 0  or boundary > 200:
                print("x coordinate of turning box out of bounds")
                validity = False

        for boundary in box.y_boundary:
            if boundary < 0  or boundary > 200:
                print("y coordinate of turning box out of bounds")
                validity = False

        for obstacle in obstacle_list:
            if (obstacle[0]-5 > box.x_boundary[0] and obstacle[0]+5 < box.x_boundary[1]) or (obstacle[1]-5 > box.y_boundary[0] and obstacle[1]+5 < box.y_boundary[1]):
                print("obstacle({}, {}) is within the turning box".format(obstacle[0], obstacle[1]))
                validity = False
        
        return validity




box =  turning_box((70,70), 'E', 'right')
print("(x, y): ",box.pos)
print("x boundary: ",box.x_boundary)
print("y boundary: ",box.y_boundary)

obstacle_list = [[170, 170, 90], [130, 130, 0], [135, 20, 90], [15, 105, 270], [50, 100, 180]]
#obstacle_list = [[170, 170, 90], [130, 130, 0], [135, 45, 90], [15, 105, 270], [60, 60, 180]]

print(box.check_inplace_turn_validity(obstacle_list))
